
#Write your code here

import sklearn.datasets as datasets
import sklearn.model_selection as ms
from sklearn.model_selection import train_test_split

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score


iris = datasets.load_iris();


X_train, X_test, y_train, y_test = train_test_split(iris.data,iris.target, random_state=30, stratify=iris.target)

print(X_train.shape)
print(X_test.shape)


knn_clf = KNeighborsClassifier()
knn_clf.fit(X_train, y_train)
print(knn_clf.score(X_train,y_train))
print(knn_clf.score(X_test,y_test))

k_range = range(3,10)


# Machine Learning Using Scikit-Learn | 3 | Decision Trees ================================================================================

import sklearn.datasets as datasets
import sklearn.model_selection as model_selection
import numpy as np
from sklearn.tree import DecisionTreeRegressor

np.random.seed(100)
# Load popular Boston dataset from sklearn.datasets module and assign it to variable boston.

boston = datasets.load_boston()

# print(boston)


# Split boston.data into two sets names X_train and X_test. Also, split boston.target into two sets Y_train and Y_test

X_train, X_test, Y_train, Y_test = model_selection.train_test_split(boston.data, boston.target,  random_state=30)
# Print the shape of X_train dataset
print(X_train.shape)

# Print the shape of X_test dataset.
print(X_test.shape)

# Build a Decision tree Regressor model from X_train set and Y_train labels, with default parameters. Name the model as dt_reg

dt_Regressor = DecisionTreeRegressor()

dt_reg = dt_Regressor.fit(X_train, Y_train)

print(dt_reg.score(X_train,Y_train))

print(dt_reg.score(X_test,Y_test))

predicted = dt_reg.predict(X_test[:2])
print(predicted)

# Get the max depth

maxdepth = 2
maxscore = 0
for x in range(2, 6):
     dt_Regressor = DecisionTreeRegressor(max_depth=x)
     dt_reg = dt_Regressor.fit(X_train, Y_train)
     score = dt_reg.score(X_test, Y_test)
     if(maxscore < score):
         maxdepth = x
         maxscore = score
print(maxdepth)


### Machine Learning Using Scikit-Learn | 4 | Ensemble Methods
#### TASK 1
import sklearn.datasets as datasets
from sklearn.model_selection 
import train_test_split
import numpy as np
np.random.seed(100)
boston = datasets.load_boston()
X_train, X_test, Y_train, Y_test = train_test_split(boston.data, boston.target,random_state=30)
print(X_train.shape)
print(X_test.shape)

### TASK 2
import sklearn.datasets as datasets
from sklearn.model_selection 
import train_test_split
from sklearn.ensemble import RandomForestRegressor
import numpy as np
np.random.seed(100)
boston = datasets.load_boston()
X_train, X_test, Y_train, Y_test = train_test_split(boston.data, boston.target,random_state=30)
print(X_train.shape)
print(X_test.shape)r
f_reg = RandomForestRegressor()





#### Machine Learning Using Scikit-Learn | 6 | Clustering
#### TASK 1
import sklearn.datasets as datasets
from sklearn import metrics
from sklearn.cluster import KMeans
from sklearn.model_selection import train_test_split
import numpy as np

iris = datasets.load_iris()
X_train, X_test, Y_train, Y_test = train_test_split(iris.data, iris.target,random_state=30)
km_cls = KMeans(n_clusters=3)
km_cls = km_cls.fit(X_train)
print(metrics.homogeneity_score(km_cls.predict(X_test), Y_test))

#### TASK 2
import sklearn.datasets as datasets
from sklearn import metrics
from sklearn.cluster import AgglomerativeClustering
from sklearn.model_selection import train_test_split
import numpy as np

np.random.seed(100)
iris = datasets.load_iris()
X_train, X_test, Y_train, Y_test = train_test_split(iris.data, 

